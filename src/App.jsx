import { useState } from 'react'
import './App.css'

function App() {
  const [input, setInput] = useState('')
  const [messages, setMessages] = useState([])
  const [isLoading, setIsLoading] = useState(false)

  const dummyResponses = [
    {
      id: 'News Agent',
      name: 'News',
      avatar: 'üì∞',
      response: '2023ÎÖÑ Íµ≠Ï†ïÍ∞êÏÇ¨ÏóêÏÑú Î∞ùÌòÄÏßÑ Î∞îÏóê Îî∞Î•¥Î©¥, ÏùºÎ∞òÏù∏ÏùÑ ÎåÄÏÉÅÏúºÎ°ú Ìïú ÏùºÎ™Ö ÌÇ§ ÌÅ¨Îäî ÏïΩ Ï≤òÎüºÏùÄ Ìö®Í≥ºÍ∞Ä ÏûÖÏ¶ùÎêòÏßÄ ÏïäÏïòÎã§Îäî ÎãµÎ≥ÄÏùÑ Î∞õÏïòÏäµÎãàÎã§. ÌäπÌûà ÌÑ∞ÎÑàÏ¶ùÌõÑÍµ∞ Îì± ÌäπÏ†ï ÏßàÌôò ÌôòÏûêÏóê ÌïúÏ†ïÌïòÏó¨ ÏÇ¨Ïö©ÎêòÏñ¥Ïïº ÌïòÎ©∞, ÏùºÎ∞òÏù∏Ïùò ÏÇ¨Ïö©ÏùÄ Ïò§ÎÇ®Ïö© ÏÇ¨Î°ÄÍ∞Ä ÏßÄÏ†ÅÎêòÏñ¥ ÏûàÏäµÎãàÎã§.',
      source: 'mimed.com+1',
      sourceUrl: 'https://mimed.com'
    },
    {
      id: 'Academia Agent',
      name: 'Academia',
      avatar: 'üéì',
      response: 'ÏùòÌïôÏ†Å Î¨∏ÌóåÏóê Îî∞Î•¥Î©¥, ÎÇ®ÏÑ±ÏùÄ 18-20ÏÑ∏, Ïó¨ÏÑ±ÏùÄ 16-18ÏÑ∏ ÏãúÍ∏∞Ïóê ÏÑ±Ïû•ÌåêÏù¥ Îã´ÌòÄ ÌÇ§ ÏÑ±Ïû•Ïù¥ Î©àÏ∂•ÎãàÎã§. 20ÏÑ∏ Ïù¥ÌõÑÏóê ÏïΩÎ¨º Î≥µÏö©Ìï¥ÏÑú ÏûêÏó∞Ïä§ÎüΩÍ≤å ÏÑ±Ïû•ÌåêÏù¥ Îã§Ïãú Ïó¥Î¶¨Îäî Í≤ÉÏùÄ Í±∞Ïùò Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§. ÏùºÎ∞òÏù∏Ïù¥ Î≥µÏö©ÌïòÎäî ÏïΩÏúºÎ°ú ÌÇ§Í∞Ä ÌÅ¥ Ïàò ÏûàÎã§Îäî Îì±Îì±ÏùÄ ÌÅ¨ ÎÖºÎ¨∏ÏùÄ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏúºÎ©∞, ÎãµÏßÄ ÏÑ±Ïû•Ìò∏Î•¥Î™¨ Ï£ºÏÇ¨Îäî Îã§ÏÑ±ÏùÑ ÏÑ±Ïû•Ìò∏Î•¥Î™¨ Í≤∞Ìïç ÌôòÏûêÏóêÍ≤åÎßå Ï†ÅÏö©Îê©ÎãàÎã§.',
      source: 'ÏÑúÏö∏ÎåÄÌïôÍµêÎ≥ëÏõê+2',
      sourceUrl: 'https://snuh.org'
    },
    {
      id: 'Logic Agent',
      name: 'Logic',
      avatar: 'ü§î',
      response: 'ÎÖºÏû• Ï∞®Î°ÄÎ•º ÎÖºÎ¶¨Ï†ÅÏúºÎ°ú Î≥¥Î©¥ ÏïΩ ÏùòÏúºÎ©¥ 20ÏÑ∏ Ïù¥ÌõÑÏóêÎèÑ ÌÇ§Í∞Ä 6cmÍπåÏßÄ Í∞ñ Ïàò ÏûàÎã§Îäî Ï£ºÏû•ÏóêÎäî Îúª ÎïåÎπº, Î≥µÏö© Ï†ÑÏßÑ ÎòêÎäî Í∞úÎ≥Ñ Ï∞®Ïù¥ Îì±Ïùò Î≥ÄÏàòÎ•º Í≤¨Î†§ Í≥†Î†§ÌïòÏßÄ ÏïäÏùÄ Ï†àÎåÄÏ†Å ÌëúÌòÑÏûÖÎãàÎã§. Ïù¥ ÏïΩÏÜçÎêú Í≤∞Í≥ºÍ∞Ä Í≥ºÌïôÏ†ÅÏúºÎ°ú Í∏∞Îä•Ìïú ÏÑ§Î™ÖÍ≥º ÎßûÏßÄ ÏïäÏúºÎ©∞, ÎÖºÎ¶¨Ï†ÅÏúºÎ°ú ÎßêÎÖÄÍ∞Ä ÎßûÏßÄ ÏïäÏäµÎãàÎã§. Ï¶â, Ï£ºÏû•Ïùò Ï†ÑÏÑ∏Í∞Ä ÎπÑÌòÑÏã§Ï†ÅÏù¥Í≥† Í≥ºÎèÑÌï©ÎãàÎã§.'
    },
    {
      id: 'Social Agent',
      name: 'Social',
      avatar: 'üë•',
      response: 'ÏÜåÏÖúÎØ∏ÎîîÏñ¥ Î∂ÑÏÑù Í≤∞Í≥º, Ìï¥Îãπ ÏïΩÎ¨ºÏóê ÎåÄÌïú Ïò®ÎùºÏù∏ Ïª§ÎÆ§ÎãàÌã∞ Î∞òÏùëÏùÄ ÎåÄÎ∂ÄÎ∂Ñ Î∂ÄÏ†ïÏ†ÅÏûÖÎãàÎã§. Ïã§Ï†ú Î≥µÏö© ÌõÑÍ∏∞Îì§ÏóêÏÑúÎäî Ìö®Í≥ºÎ•º Î≥¥ÏßÄ Î™ªÌñàÎã§Îäî ÏùòÍ≤¨Ïù¥ 80% Ïù¥ÏÉÅÏùÑ Ï∞®ÏßÄÌïòÎ©∞, ÏùºÎ∂Ä ÏÇ¨Ïö©ÏûêÎì§ÏùÄ Î∂ÄÏûëÏö©ÏùÑ Ìò∏ÏÜåÌïòÍ≥† ÏûàÏäµÎãàÎã§. ÌäπÌûà 20ÎåÄ Ïù¥ÌõÑ ÌÇ§ ÏÑ±Ïû•Ïóê ÎåÄÌïú Í∏∞ÎåÄÍ∞êÏùÑ Ïù¥Ïö©Ìïú ÎßàÏºÄÌåÖÏóê ÎåÄÌïú ÎπÑÌåêÏ†Å ÏãúÍ∞ÅÏù¥ ÎßéÏù¥ Í¥ÄÏ∞∞Îê©ÎãàÎã§.',
      source: 'reddit.com+3',
      sourceUrl: 'https://reddit.com'
    }
  ]

  const handleSubmit = (e) => {
    e.preventDefault()
    if (!input.trim()) return

    const currentQuestion = input.trim()
    setInput('') // ÏûÖÎ†•Ï∞Ω Ï¶âÏãú ÌÅ¥Î¶¨Ïñ¥
    setIsLoading(true)

    // ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏ÏùÑ Î©îÏãúÏßÄÏóê Ï∂îÍ∞Ä
    const questionMessage = {
      id: Date.now(),
      type: 'question',
      content: currentQuestion,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, questionMessage])

    // ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î°ú ÏõπÏÜåÏºì ÏùëÎãµ ÏãúÎÆ¨Î†àÏù¥ÏÖò
    setTimeout(() => {
      // Í∞Å ÏóêÏù¥Ï†ÑÌä∏ ÏùëÎãµÏùÑ Í∞úÎ≥Ñ Î©îÏãúÏßÄÎ°ú Ï∂îÍ∞Ä
      const responseMessages = dummyResponses.map((response, index) => ({
        id: Date.now() + index + 1,
        type: 'response',
        agentId: response.id,
        agentName: response.name,
        avatar: response.avatar,
        content: response.response,
        source: response.source,
        sourceUrl: response.sourceUrl,
        timestamp: new Date()
      }))

      setMessages(prev => [...prev, ...responseMessages])
      setIsLoading(false)
    }, 1000)
  }

  const copyText = (text) => {
    navigator.clipboard.writeText(text)
  }

  const exportText = (text) => {
    const blob = new Blob([text], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'factcheck-result.txt'
    a.click()
    URL.revokeObjectURL(url)
  }

  return (
    <div className="app">
      <div className="tabs">
        <button className="tab active">ÌÜ†Î°†</button>
        <button className="tab">Í≤∞Í≥ºÎ≥¥Í∏∞</button>
        <button className="tab">ÎùºÏù¥Î∏åÎü¨Î¶¨</button>
      </div>

      <div className="content">
        {messages.map((message) => (
          <div key={message.id}>
            {message.type === 'question' ? (
              <div className="user-question">
                {message.content}
              </div>
            ) : (
              <div className="response-card">
                <div className="response-header">
                  <span className="avatar">{message.avatar}</span>
                  <span className="agent-name">{message.agentName}</span>
                </div>
                <div className="response-content">
                  {message.content}
                </div>
                <div className="response-footer">
                  {message.source && message.source.trim() && (
                    <a 
                      href={message.sourceUrl} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="source-link"
                    >
                      {message.source}
                    </a>
                  )}
                  <div className="actions">
                    <button 
                      className="action-btn"
                      onClick={() => copyText(message.content)}
                      title="Î≥µÏÇ¨"
                    >
                      üìã
                    </button>
                    <button 
                      className="action-btn"
                      onClick={() => exportText(message.content)}
                      title="ÎÇ¥Î≥¥ÎÇ¥Í∏∞"
                    >
                      üì§
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        ))}

        {isLoading && (
          <div className="loading">
            Î∂ÑÏÑù Ï§ë...
          </div>
        )}
      </div>

      <form onSubmit={handleSubmit} className="input-form">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Write any opinion..."
          className="input-field"
        />
        <button type="submit" className="submit-btn">
          ‚Üë
        </button>
      </form>
    </div>
  )
}

export default App
